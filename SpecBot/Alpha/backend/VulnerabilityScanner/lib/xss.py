from lib.helper.helper import *
from random import randint
import random
from urllib.parse import urljoin, urlparse, parse_qs, urlencode
from huepy import *

class xss:
	@classmethod
	def generate(self, path_to_payloads):
		payloads = open(path_to_payloads, 'r').read().splitlines()
		payload = random.choice(payloads)
		formats = [
			'<script/>{0}<\script\>',
			'<\script/>{0}<\\script>',
			'<\script\> {0}<//script>',
			'<script>{0}<\script/>',
			'<script>{0}<//script>',
			'<script>{0}</script>'
    ]
		return random.choice(formats).format(payload)

	@classmethod
	def forms_method(self):
		for form in self.data['forms']:
			try:
				action = form['action']
			except KeyError:
				action = self.url

			form_method = form['method'].lower().strip()
			if form_method == 'post' or form_method == 'get':
				print('[' + green('XSS') + '] ' + 'Target have form with POST method: ' + urljoin(self.url, action))
				keys = {}
				for name, type in form['inputs'].items():
					try:
						if type == 'submit':
							keys.update({ name: name })
						else:
							keys.update({ name: self.payload })

					except Exception as e:
						print('[' + green('XSS') + '] ' + 'Internal error: ' + str(e))

				if form_method == 'post':
					req = self.session.post(urljoin(self.url, action), data = keys)
				else:
					req = self.session.get(urljoin(self.url, action), data = keys)

				if self.payload in str(req.text):
					message = 'Detected XSS (' + form_method.upper() + ') at ' + urljoin(self.url, req.url)
					print('[' + green('XSS') + '] ' + message)
					return {
						'url': req.url.split('?')[0],
						'message': message,
						'type': 'XSS Vulnerability (via form)',
						'priority': 'High',
						'suggestions': ['https://owasp.org/www-community/attacks/xss/']
					}

	@classmethod
	def links_method(self):
		for url in self.data['links']:
			if url.startswith('http://') is False or url.startswith('https://') is False or url.startswith('mailto:') is False:
				base = urljoin(self.url, url)
				query = urlparse(base).query
				if query != '':
					query_payload = query.replace(query[query.find('=') + 1:len(query)], self.payload, 1)
					test = base.replace(query, query_payload, 1)
					query_all = base.replace(query, urlencode({x: self.payload for x in parse_qs(query)}))

					if not url.startswith('mailto:') and not url.startswith('tel:'):
						_respone  = self.session.get(test, verify = False)
						if self.payload in _respone.text or self.payload in self.session.get(query_all).text:
							message = 'Detected XSS (GET) at ' + base
							print('[' + green('XSS') + '] ' + message)
							return {
								'url': base.split('?')[0],
								'message': message,
								'type': 'XSS Vulnerability (via link)',
								'priority': 'High',
								'suggestions': ['https://owasp.org/www-community/attacks/xss/']
							}

	@classmethod
	def main(self, url, proxy, cookie, data, path_to_payloads):
		self.payload = str(self.generate(path_to_payloads))
		self.url = url
		self.data = data

		headers = { 'User-Agent': random.choice(user_agents) }

		self.session = session(proxy, headers, cookie)

		print('[' + green('XSS') + '] ' + 'Checking connection to: '+ url)
		try:
			ctr = self.session.get(url)
			self.body = ctr.text
		except Exception as e:
			print('[' + green('XSS') + '] ' + 'Internal error: ' + str(e))
			return
		if ctr.status_code > 400:
			print('[' + green('XSS') + '] ' + 'Connection failed ' + str(ctr.status_code))
			return
		else:
			print('[' + green('XSS') + '] ' + 'Connection estabilished ' + str(ctr.status_code))

		result = []
		result.append(self.forms_method())
		result.append(self.links_method())
		return result