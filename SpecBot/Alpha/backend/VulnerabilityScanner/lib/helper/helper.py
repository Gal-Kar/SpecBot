import requests, json, os, sys
from urllib.parse import urlparse
import platform

user_agents = [
	# Chrome
	'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36',
	'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36',
	'Mozilla/5.0 (Windows NT 5.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36',
	'Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36',
	'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36',
	'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36',
	'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36',
	'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36',
	'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36',
	'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36',
	# Firefox
	'Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1)',
	'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko',
	'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)',
	'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko',
	'Mozilla/5.0 (Windows NT 6.2; WOW64; Trident/7.0; rv:11.0) like Gecko',
	'Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko',
	'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0)',
	'Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko',
	'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)',
	'Mozilla/5.0 (Windows NT 6.1; Win64; x64; Trident/7.0; rv:11.0) like Gecko',
	'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)',
	'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)',
	'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)'
]

line = "—————————————————"
cookie = '{ "ID" : "1094200543" }'
proxy = { 'https' : 'https://10.10.1.10:1080' }

def path_based_on_os(path):
    return path.replace("/", "\\") if platform.system() == 'Windows' else path.replace("\\", "/")

def signal_handler(signal, frame):
    print("\nExiting...\n")
    sys.exit(0)

def session(proxies, headers, cookie, timeout=10):
	req = requests.Session()
	req.proxies = proxies
	req.headers = headers
	req.cookies.update(json.loads(cookie))
	req.timeout = timeout
	return req

def validate_path(path):
	if os.path.exists(path) and os.path.isdir(path):
		if path.endswith('/'):
			return path
		else:
			return path + '/'
	else:
		raise ValueError(f"Invalid path: {path}")
	
def create_item(priority, type, lastLine, lastColumn, firstColumn, message, block_code, suggestions):
	return {
		"priority": priority,
		"type": type,
		"lastLine": lastLine,
		"lastColumn": lastColumn,
		"firstColumn": firstColumn,
		"message": message,
		"block_code": block_code,
		"suggestions": suggestions
	}

def write_to_json(url, priority, type, lastLine, lastColumn, firstColumn, message, block_code, suggestions, file_to_export):
	if os.path.exists(file_to_export):
		with open(file_to_export, 'r+') as fp:
			data = fp.read()
			if not data:
				data = "{}"
			data = json.loads(data)
	else:
		data = {}

	if url not in data:
		data[url] = []

	item = create_item(priority, type, lastLine, lastColumn, firstColumn, message, block_code, suggestions)

	if item not in data[url]:
			data[url].append(item)

	with open(file_to_export, 'w') as fp:
		json.dump(data, fp)

def add_to_json(dict, url, priority, type, lastLine, lastColumn, firstColumn, message, block_code, suggestions):
	if url not in dict:
		dict[url] = []

	item = create_item(priority, type, lastLine, lastColumn, firstColumn, message, block_code, suggestions)

	if item not in dict[url]:
		dict[url].append(item)

	return dict